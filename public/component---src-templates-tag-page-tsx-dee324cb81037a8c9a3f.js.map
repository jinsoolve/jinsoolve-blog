{"version":3,"file":"component---src-templates-tag-page-tsx-dee324cb81037a8c9a3f.js","mappings":"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","sources":["webpack://jinsoolve-blog/./src/components/Tags.tsx","webpack://jinsoolve-blog/./src/templates/TagPage.tsx"],"sourcesContent":["import { Flex, Heading, Text } from \"@chakra-ui/react\";\nimport { motion } from \"framer-motion\";\nimport { graphql, Link, useStaticQuery } from \"gatsby\";\n\nimport { ALL_POSTS_TAG_NAME, koreanTagNames } from \"../constants\";\nimport { convertSlugToTitle } from \"../utils/string\";\n\ninterface TagsProps {\n  currentTag: string;\n}\n\nexport default function Tags({ currentTag }: TagsProps) {\n  const data = useStaticQuery(graphql`\n    query Tags {\n      allMdx(\n        filter: { frontmatter: { title: { nin: [\"김진수 포트폴리오\", \"김진수에 대하여\"] }, locale: { eq: null } } }\n      ) {\n        group(field: { frontmatter: { tags: SELECT } }) {\n          tagPostCount: totalCount\n          tag: fieldValue\n        }\n        allPostCount: totalCount\n      }\n    }\n  `);\n\n  const currentTagPostCount = data.allMdx.group.find(\n    (group: { tag: string; tagPostCount: number }) => group.tag === currentTag,\n  )?.tagPostCount;\n\n  return (\n    <Flex marginTop=\"80px\" direction=\"column\" width=\"100%\" alignItems=\"center\">\n      {/* Title + Count */}\n      <motion.div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          width: \"100%\",\n          margin: \"auto\",\n        }}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ type: \"spring\", stiffness: 100, damping: 20 }}\n      >\n        <Heading\n          fontStyle=\"italic\"\n          fontSize={{ base: currentTag === ALL_POSTS_TAG_NAME ? \"40px\" : \"30px\", md: \"60px\" }}\n          fontWeight=\"800\"\n          letterSpacing={-1.5}\n        >\n          {convertSlugToTitle(currentTag)}.\n        </Heading>\n        <Text\n          fontSize={{ base: \"12px\", md: \"16px\" }}\n          fontStyle=\"italic\"\n          color=\"gray.500\"\n          fontWeight=\"200\"\n        >\n          ({currentTag === ALL_POSTS_TAG_NAME ? data.allMdx.allPostCount : currentTagPostCount})\n        </Text>\n      </motion.div>\n\n      {/* Tag List */}\n      <Flex direction=\"column\">\n        <Flex\n          as=\"nav\"\n          columnGap=\"10px\"\n          rowGap=\"10px\"\n          flexWrap=\"wrap\"\n          marginTop=\"40px\"\n          padding={{ base: \"0 20px\", md: \"0px\" }}\n          width=\"100%\"\n          maxWidth=\"600px\"\n          justifyContent=\"center\"\n        >\n          <Link to=\"/tags/\">\n            <Flex justifyContent=\"center\" alignItems=\"flex-start\">\n              <Text\n                fontSize={{ base: \"14px\", md: \"18px\" }}\n                fontWeight={currentTag === ALL_POSTS_TAG_NAME ? 700 : 400}\n                _hover={{ textDecoration: \"underline\" }}\n              >\n                All TAGS.\n              </Text>\n              <Text fontSize=\"12px\" fontWeight={currentTag === ALL_POSTS_TAG_NAME ? 700 : 300}>\n                ({data.allMdx.allPostCount})\n              </Text>\n            </Flex>\n          </Link>\n        </Flex>\n        <Flex\n          as=\"nav\"\n          columnGap=\"10px\"\n          rowGap=\"10px\"\n          flexWrap=\"wrap\"\n          marginTop=\"10px\"\n          padding={{ base: \"0 20px\", md: \"0px\" }}\n          width=\"100%\"\n          maxWidth=\"600px\"\n          justifyContent=\"center\"\n        >\n          {Object.values(data.allMdx.group).map((group) => {\n            const { tag, tagPostCount } = group as {\n              tag: string;\n              tagPostCount: number;\n            };\n            return (\n              <Link key={tag} to={`/tags/${tag}`}>\n                <Flex justifyContent=\"center\" alignItems=\"flex-start\">\n                  <Text\n                    fontSize={{ base: \"14px\", md: \"18px\" }}\n                    fontWeight={currentTag === tag ? 700 : 400}\n                    _hover={{ textDecoration: \"underline\" }}\n                  >\n                    {koreanTagNames[tag!] || tag}\n                  </Text>\n                  <Text fontSize=\"12px\" fontWeight={currentTag === tag ? 700 : 300}>\n                    ({tagPostCount})\n                  </Text>\n                </Flex>\n              </Link>\n            );\n          })}\n        </Flex>\n      </Flex>\n\n    </Flex>\n  );\n}\n","import type { HeadFC } from \"gatsby\";\nimport { graphql } from \"gatsby\";\nimport { getSrc } from \"gatsby-plugin-image\";\n\nimport MainLayout from \"../components/MainLayout\";\nimport Pagenation from \"../components/Pagenation\";\nimport PostGrid from \"../components/PostGrid\";\nimport Profile from \"../components/Profile\";\nimport Tags from \"../components/Tags\";\nimport { DOMAIN } from \"../constants\";\n\nexport const query = graphql`\n  query TagPageTemplate($tag: String!, $limit: Int, $skip: Int) {\n    allMdx(\n      sort: { frontmatter: { createdAt: DESC } }\n      filter: { frontmatter: { tags: { in: [$tag] }, locale: { eq: null } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      totalCount\n      nodes {\n        frontmatter {\n          thumbnail {\n            childImageSharp {\n              gatsbyImageData\n            }\n          }\n          title\n          updatedAt\n          createdAt\n          description\n          slug\n          tags\n        }\n        excerpt(pruneLength: 100)\n      }\n\n      pageInfo {\n        currentPage\n        pageCount\n      }\n    }\n    ogimage: imageSharp(fluid: { originalName: { eq: \"og-image.png\" } }) {\n      gatsbyImageData\n    }\n\n    profileImage: imageSharp(fluid: { originalName: { eq: \"profile.jpg\" } }) {\n      gatsbyImageData\n    }\n  }\n`;\n\ninterface TagsProps {\n  pageContext: {\n    tag: string;\n  };\n  data: GatsbyTypes.TagPageTemplateQuery;\n}\n\nexport default function TagsTemplate({ pageContext, data }: TagsProps) {\n  const currentPage = data.allMdx.pageInfo.currentPage;\n  const pageCount = data.allMdx.pageInfo.pageCount;\n  const baseUrl = `/tags/${pageContext.tag}`;\n\n  return (\n    <MainLayout>\n      <Tags currentTag={pageContext.tag} />\n      <PostGrid posts={data.allMdx.nodes} />\n      {pageCount > 1 && <Pagenation currentPage={currentPage} pageCount={pageCount} baseUrl={baseUrl} />}\n      <Profile />\n    </MainLayout>\n  );\n}\n\nexport const Head: HeadFC<Queries.TagPageTemplateQuery, TagsProps[\"pageContext\"]> = ({\n  data,\n  pageContext,\n}) => {\n  const ogimage = data.ogimage?.gatsbyImageData!;\n  const description = \"머신러닝과 알고리즘을 공부하는 김진수입니다.\";\n  const title = \"Jinsoolve 블로그\";\n  const tag = pageContext.tag;\n\n  return (\n    <>\n      {/* HTML Meta tags */}\n      <title>\n        {title} - {tag}\n      </title>\n      <meta name=\"description\" content={description} />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n      {/* Facebook Meta tags */}\n      <meta property=\"og:url\" content={DOMAIN} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:site_name\" content={title} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={getSrc(ogimage)} />\n      {/*  Twitter Meta tags  */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta property=\"twitter:domain\" content=\"jinsoolve.netlify.app\" />\n      <meta property=\"twitter:url\" content={DOMAIN} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={getSrc(ogimage)} />\n      <meta name=\"twitter:label1\" content=\"Category\" />\n      <meta name=\"twitter:data1\" content=\"개발\" />\n    </>\n  );\n};\n"],"names":["Tags","_ref","_data$allMdx$group$fi","currentTag","data","useStaticQuery","currentTagPostCount","allMdx","group","find","tag","tagPostCount","React","createElement","Flex","marginTop","direction","width","alignItems","motion","div","style","display","justifyContent","margin","initial","opacity","y","animate","transition","type","stiffness","damping","Heading","fontStyle","fontSize","base","ALL_POSTS_TAG_NAME","md","fontWeight","letterSpacing","convertSlugToTitle","Text","color","allPostCount","as","columnGap","rowGap","flexWrap","padding","maxWidth","Link","to","_hover","textDecoration","Object","values","map","key","koreanTagNames","TagsTemplate","pageContext","currentPage","pageInfo","pageCount","baseUrl","MainLayout","PostGrid","posts","nodes","Pagenation","Profile","Head","_ref2","_data$ogimage","ogimage","gatsbyImageData","description","title","Fragment","name","content","property","DOMAIN","getSrc"],"sourceRoot":""}