{"version":3,"file":"component---src-templates-all-featured-post-page-tsx-68cd1736e47fa63e4064.js","mappings":"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","sources":["webpack://jinsoolve-blog/./src/components/DefaultCategories.tsx","webpack://jinsoolve-blog/./src/components/FeaturedPostCard.tsx","webpack://jinsoolve-blog/./src/components/FeaturedPostSection.tsx","webpack://jinsoolve-blog/./src/components/ShortPostSection.tsx","webpack://jinsoolve-blog/./src/templates/AllFeaturedPostPage.tsx","webpack://jinsoolve-blog/./node_modules/@chakra-ui/react/dist/esm/media-query/use-breakpoint-value.mjs","webpack://jinsoolve-blog/./node_modules/@chakra-ui/react/dist/esm/media-query/use-breakpoint.mjs","webpack://jinsoolve-blog/./node_modules/@chakra-ui/react/dist/esm/media-query/media-query.utils.mjs"],"sourcesContent":["import { Flex, Heading, Text } from \"@chakra-ui/react\";\nimport { motion } from \"framer-motion\";\nimport { graphql, Link, useStaticQuery } from \"gatsby\";\n\nimport { ALL_POSTS_NAME, koreanTagNames } from \"../constants\";\nimport { convertSlugToTitle } from \"../utils/string\";\n\ninterface CategoriesProps {\n  currentCategory: string;\n}\n\nexport default function categories({ currentCategory }: CategoriesProps) {\n  const data = useStaticQuery(graphql`\n    query categories {\n      allMdx(\n        filter: { frontmatter: { title: { nin: [\"김진수 포트폴리오\", \"김진수에 대하여\"] }, locale: { eq: null } } }\n      ) {\n        group(field: { frontmatter: { categories: SELECT } }) {\n          categoryPostCount: totalCount\n          category: fieldValue\n        }\n        allPostCount: totalCount\n      }\n    }\n  `);\n\n  const currentCategoryPostCount = data.allMdx.group.find(\n    (group: { category: string; categoryPostCount: number }) => group.category === currentCategory,\n  )?.categoryPostCount;\n\n  return (\n    <Flex marginTop=\"80px\" direction=\"column\" width=\"100%\" alignItems=\"center\">\n      {/* Title + Count */}\n      <motion.div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          width: \"100%\",\n          margin: \"auto\",\n        }}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ type: \"spring\", stiffness: 100, damping: 20 }}\n      >\n        <Heading\n          fontStyle=\"italic\"\n          fontSize={{ base: currentCategory === ALL_POSTS_NAME ? \"40px\" : \"30px\", md: \"60px\" }}\n          fontWeight=\"800\"\n          letterSpacing={-1.5}\n        >\n          {convertSlugToTitle(currentCategory)}.\n        </Heading>\n        <Text\n          fontSize={{ base: \"12px\", md: \"16px\" }}\n          fontStyle=\"italic\"\n          color=\"gray.500\"\n          fontWeight=\"200\"\n        >\n          ({currentCategory === ALL_POSTS_NAME ? data.allMdx.allPostCount : currentCategoryPostCount})\n        </Text>\n      </motion.div>\n\n      {/* category List */}\n      <Flex direction=\"column\">\n        <Flex\n          as=\"nav\"\n          columnGap=\"10px\"\n          rowGap=\"10px\"\n          flexWrap=\"wrap\"\n          marginTop=\"40px\"\n          padding={{ base: \"0 20px\", md: \"0px\" }}\n          width=\"100%\"\n          maxWidth=\"600px\"\n          justifyContent=\"center\"\n        >\n          <Link to=\"/\">\n            <Flex justifyContent=\"center\" alignItems=\"flex-start\">\n              <Text\n                fontSize={{ base: \"14px\", md: \"18px\" }}\n                fontWeight={currentCategory === ALL_POSTS_NAME ? 700 : 400}\n                _hover={{ textDecoration: \"underline\" }}\n              >\n                ALL.\n              </Text>\n              <Text fontSize=\"12px\" fontWeight={currentCategory === ALL_POSTS_NAME ? 700 : 300}>\n                ({data.allMdx.allPostCount})\n              </Text>\n            </Flex>\n          </Link>\n        </Flex>\n        <Flex\n          as=\"nav\"\n          columnGap=\"10px\"\n          rowGap=\"10px\"\n          flexWrap=\"wrap\"\n          marginTop=\"10px\"\n          padding={{ base: \"0 20px\", md: \"0px\" }}\n          width=\"100%\"\n          maxWidth=\"600px\"\n          justifyContent=\"center\"\n        >\n          {Object.values(data.allMdx.group).map((group) => {\n            const { category, categoryPostCount } = group as {\n              category: string;\n              categoryPostCount: number;\n            };\n            return (\n              <Link key={category} to={`/allFeaturedPosts/${category}`}>\n                <Flex justifyContent=\"center\" alignItems=\"flex-start\">\n                  <Text\n                    fontSize={{ base: \"14px\", md: \"18px\" }}\n                    fontWeight={currentCategory === category ? 700 : 400}\n                    _hover={{ textDecoration: \"underline\" }}\n                  >\n                    {koreanTagNames[category!] || category}\n                  </Text>\n                  <Text fontSize=\"12px\" fontWeight={currentCategory === category ? 700 : 300}>\n                    ({categoryPostCount})\n                  </Text>\n                </Flex>\n              </Link>\n            );\n          })}\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n}\n","import { Box, Center, Flex, Heading, Text, useColorModeValue } from \"@chakra-ui/react\";\nimport { Link } from \"gatsby\";\nimport type { IGatsbyImageData } from \"gatsby-plugin-image\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\nimport React, { useMemo, useState, useEffect, useRef } from \"react\";\nimport defaultThumbnailImage from \"../assets/default-thumbnail.jpg\"; // 기본 이미지 경로\n\nimport { koreanTagNames } from \"../constants\";\n\ninterface FeaturedPostCardProps {\n  title: string;\n  description: string;\n  slug: string;\n  createdAt: string;\n  updatedAt: string;\n  categories: readonly (string | null)[];\n  thumbnail?: IGatsbyImageData;\n  excerpt: string;\n}\n\nconst FeaturedPostCard = ({\n                            createdAt,\n                            description,\n                            slug,\n                            categories,\n                            thumbnail,\n                            title,\n                            updatedAt,\n                            excerpt,\n                          }: FeaturedPostCardProps) => {\n  const diffMs = useMemo(() => new Date().getTime() - new Date(createdAt).getTime(), [createdAt]);\n  const isNewPost = useMemo(() => Math.floor(diffMs / (1000 * 60 * 60 * 24)) <= 10, [diffMs]);\n  const [isHovered, setIsHovered] = useState(false);\n\n  const boxShadowColor = useColorModeValue(\n    \"0 4px 6px rgba(0, 0, 0, 0.3)\",\n    \"0 4px 6px rgba(255, 255, 255, 0.3)\"\n  );\n\n  const borderColor = useColorModeValue(\"gray.50\", \"#444548\");\n\n  return (\n    <Link to={`/posts/${slug}`}>\n      <Box\n        as=\"article\"\n        position=\"relative\"\n        borderRadius=\"20px\"\n        overflow=\"hidden\"\n        width={{base: \"270px\", sm_md: \"290px\"}}\n        minWidth=\"205px\"\n        maxWidth=\"80vw\"\n        minHeight=\"380px\"\n        height=\"100%\"\n        transition=\"all 0.25s ease\"\n        boxShadow=\"xl\"\n        borderWidth=\"2px\"\n        borderColor={borderColor}\n        _hover={{\n          borderColor: \"blue.400\",\n          boxShadow: \"xl\",\n          cursor: \"pointer\",\n        }}\n      >\n        {/* 썸네일 */}\n        {thumbnail ? (\n          <GatsbyImage\n            objectFit=\"cover\"\n            style={{\n              maxHeight: \"171px\",\n              height: \"45%\",\n              width: \"100%\"\n            }}\n            image={thumbnail}\n            alt={`${slug} cover image`}\n          />\n        ) : (\n          <GatsbyImage\n            objectFit=\"cover\"\n            style={{\n              maxHeight: \"171px\",\n              height: \"45%\",\n              width: \"100%\"\n            }}\n            image={thumbnail}\n            alt={`${slug} cover image`}\n          />\n          // <Box\n          //   height=\"45%\"\n          //   width=\"100%\"\n          //   backgroundColor=\"gray.200\"\n          //   display=\"flex\"\n          //   alignItems=\"center\"\n          //   justifyContent=\"center\"\n          // >\n          //   <Text color=\"gray.500\" fontSize=\"16px\">\n          //     No Thumbnail\n          //   </Text>\n          // </Box>\n        )}\n\n        {/* 메타 정보와 제목 */}\n        <Flex\n          flexDirection=\"column\"\n          justifyContent=\"space-between\"\n          height={thumbnail ? \"55%\" : \"100%\"}\n          padding=\"20px\"\n        >\n          <Box>\n            <Heading fontSize=\"20px\" fontWeight=\"700\" marginBottom=\"8px\">\n              {title}\n            </Heading>\n            <Text fontSize=\"16px\" color=\"gray.600\" noOfLines={2} marginBottom=\"10px\">\n              {description || excerpt}\n            </Text>\n          </Box>\n\n          {/* 날짜 및 New Post 태그 */}\n          <Flex justifyContent=\"space-between\" alignItems=\"center\" marginTop=\"0px\">\n            <Text fontSize=\"14px\" color=\"gray.500\">\n              {updatedAt ? `${updatedAt} (updated)` : createdAt}\n            </Text>\n            {isNewPost && (\n              <Box\n                backgroundColor=\"blue.400\"\n                color=\"white\"\n                borderRadius=\"12px\"\n                padding=\"4px 8px\"\n                fontSize=\"12px\"\n                fontWeight=\"bold\"\n              >\n                NEW POST\n              </Box>\n            )}\n          </Flex>\n        </Flex>\n      </Box>\n    </Link>\n  );\n};\n\nexport default FeaturedPostCard;","import {\n  Box,\n  Flex,\n  Heading,\n  IconButton,\n  useColorMode,\n  useBreakpointValue,\n} from \"@chakra-ui/react\";\nimport { useState, useRef } from \"react\";\nimport { motion } from \"framer-motion\";\n\nimport FeaturedPostCard from \"./FeaturedPostCard\";\n\ninterface FeaturedPostSectionProps {\n  posts: GatsbyTypes.AllPostPageTemplateQuery[\"featuredPosts\"][\"nodes\"];\n  isLarge?: boolean; // boolean prop 추가 (optional)\n}\n\nconst FeaturedPostSection = ({ posts, isLarge = false }: FeaturedPostSectionProps) => {\n  const [scrollPosition, setScrollPosition] = useState(0);\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const { colorMode } = useColorMode();\n\n  // 반응형으로 버튼 위치 조정\n  const arrowPosition = useBreakpointValue({ base: \"-25px\", md: \"-40px\" });\n\n  const handleScroll = (direction: \"left\" | \"right\") => {\n    if (!scrollContainerRef.current) return;\n\n    const scrollAmount = scrollContainerRef.current.offsetWidth;\n    const newScrollPosition =\n      direction === \"left\"\n        ? scrollPosition - scrollAmount\n        : scrollPosition + scrollAmount;\n\n    scrollContainerRef.current.scrollTo({\n      left: newScrollPosition,\n      behavior: \"smooth\",\n    });\n\n    setScrollPosition(newScrollPosition);\n  };\n\n  return (\n    <Box\n      // width={isLarge ? \"90%\" : \"80%\"} // boolean 값에 따라 width 변경\n      width={isLarge ? {base: \"500px\", sm_md: \"610px\", lg: \"920px\"} : \"660px\"}\n      maxWidth={{ base: \"85vw\", sm_md: \"85vw\", lg: \"85vw\" }}\n      mx=\"auto\"\n      py=\"20px\"\n      position=\"relative\" // 버튼이 이 컨테이너 기준으로 배치됨\n      margin=\"0px\"\n    >\n      {/* Heading 위치 조정 */}\n      <Heading fontStyle=\"italic\" marginBottom=\"20px\" marginTop=\"-20px\">\n        Featured.\n      </Heading>\n\n      {/* 콘텐츠 영역 */}\n      <Box\n        ref={scrollContainerRef}\n        display=\"flex\"\n        overflowX=\"auto\"\n        scrollSnapType=\"x mandatory\"\n        scrollBehavior=\"smooth\"\n        gap=\"20px\"\n        maxWidth={{ base: \"95%\", md: \"100%\" }}\n        margin=\"auto\"\n        css={{\n          paddingBottom: \"16px\",\n          scrollbarColor: `${colorMode === \"dark\" ? \"#555 transparent\" : \"#aaa transparent\"}`, // 평소 투명\n          scrollbarWidth: \"thin\",\n          \"&::-webkit-scrollbar\": {\n            height: \"6px\",\n            backgroundColor: \"transparent\", // 기본 투명\n          },\n          \"&::-webkit-scrollbar-thumb\": {\n            backgroundColor: \"transparent\", // 기본 투명\n            borderRadius: \"4px\",\n            transition: \"background-color 0.3s ease\",\n          },\n          \"&:hover::-webkit-scrollbar-thumb\": {\n            backgroundColor: colorMode === \"dark\" ? \"#555\" : \"#aaa\", // 마우스 호버 시 색상 활성화\n          },\n          \"&:hover::-webkit-scrollbar\": {\n            backgroundColor: \"transparent\", // 마우스 호버 시 배경 활성화\n          },\n        }}\n      >\n        {posts.map((post, index) => (\n          <motion.div\n            key={post.frontmatter?.slug!}\n            style={{\n              flex: \"0 0 auto\",\n              scrollSnapAlign: \"start\",\n              maxWidth: \"85vw\",\n            }}\n          >\n            <FeaturedPostCard\n              createdAt={post.frontmatter?.createdAt!}\n              description={post.frontmatter?.description!}\n              title={post.frontmatter?.title!}\n              slug={post.frontmatter?.slug!}\n              updatedAt={post.frontmatter?.updatedAt!}\n              categories={post.frontmatter?.categories!}\n              thumbnail={\n                post.frontmatter?.thumbnail?.childImageSharp?.gatsbyImageData!\n              }\n              excerpt={post.excerpt!}\n            />\n          </motion.div>\n        ))}\n      </Box>\n\n      {/* 좌우 화살표 버튼 */}\n      <IconButton\n        aria-label=\"Scroll Left\"\n        position=\"absolute\"\n        top=\"50%\"\n        transform=\"translateY(-50%)\"\n        left={arrowPosition}\n        onClick={() => handleScroll(\"left\")}\n        bg=\"inherit\"             // 배경색 제거\n        icon={<LeftArrowIcon />} // 아이콘 컴포넌트 사용\n        width=\"30px\"\n        height=\"30px\"\n        p=\"0\"\n        minW=\"unset\"\n        minH=\"unset\"\n        _hover={{ color: \"blue.500\" }}  // 호버 시 아이콘 색상만 변경\n        _active={{ bg: \"inherit\", transform: \"none\" }} // 클릭 반응 제거\n        _focus={{ boxShadow: \"none\" }}                 // 포커스 반응 제거\n      />\n      <IconButton\n        aria-label=\"Scroll Right\"\n        position=\"absolute\"\n        top=\"50%\"\n        transform=\"translateY(-50%)\"\n        right={arrowPosition} // 반응형으로 위치 조정\n        onClick={() => handleScroll(\"right\")}\n        bg=\"inherit\"\n        icon={<RightArrowIcon />}\n        width=\"36px\"     // 버튼 크기 조정\n        height=\"36px\"    // 버튼 크기 조정\n        p=\"0\"            // 패딩 제거 (버튼 크기 최소화)\n        minW=\"unset\"     // 최소 너비 제거 (Chakra 기본값 무시)\n        minH=\"unset\"     // 최소 높이 제거 (Chakra 기본값 무시)\n        _hover={{ color: \"blue.500\" }}  // 호버 시 아이콘 색상만 변경\n        _active={{ bg: \"inherit\", transform: \"none\" }} // 클릭 반응 제거\n        _focus={{ boxShadow: \"none\" }}                 // 포커스 반응 제거\n      />\n    </Box>\n  );\n};\n\nconst LeftArrowIcon = () => (\n  <svg\n    width=\"24px\"\n    height=\"24px\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M15 6L9 12L15 20\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n);\n\nconst RightArrowIcon = () => (\n  <svg\n    width=\"24px\"\n    height=\"24px\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M9 6L15 12L9 18\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n);\n\nexport default FeaturedPostSection;","import { Flex, Heading, Text } from \"@chakra-ui/react\";\nimport { Link } from \"gatsby\";\n\ninterface ShortPostSectionProps {\n  posts: GatsbyTypes.AllPostPageTemplateQuery[\"shortPosts\"][\"nodes\"];\n  isLarge?: boolean; // boolean prop 추가 (optional)\n}\n\nconst ShortPostSection = ({ posts, isLarge = false }: ShortPostSectionProps) => {\n  return (\n    <Flex\n      marginTop={{ base: \"100px\", lg: \"0px\" }}\n      marginLeft={{ base: \"3vw\", md: \"150px\", lg: \"0px\" }}\n      paddingRight={{ base: \"3vw\", md: \"150px\", lg: \"0px\" }}\n      width={isLarge ? { base: \"85%\", sm_md: \"95%\" } : { base: \"100%\", lg: \"240px\" }}\n      direction=\"column\"\n      alignSelf={{ base: \"center\", lg: \"flex-start\" }} // 좁을 때만 중앙정렬\n    >\n      <Heading fontStyle=\"italic\" _hover={{ textDecoration: \"underline\" }}>\n        <Link to=\"/categories/short\">Shorts.</Link>\n      </Heading>\n      <Flex\n        direction=\"column\"\n        as=\"ul\"\n        maxHeight=\"400px\"\n        overflowY=\"auto\"\n        overscrollBehavior=\"contain\"\n        marginTop=\"20px\"\n        gap={{ base: \"10px\", lg: \"20px\" }}\n      >\n        {posts.map((post) => (\n          <Link to={`/posts/${post.frontmatter?.slug!}`} key={post.frontmatter?.slug!}>\n            <Flex direction=\"column\" as=\"li\" _hover={{ textDecoration: \"underline\" }}>\n              <Text fontSize=\"12px\" opacity={0.6}>\n                {post.frontmatter?.createdAt}\n              </Text>\n              <Text fontSize=\"14px\">{post.frontmatter?.title}</Text>\n            </Flex>\n          </Link>\n        ))}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default ShortPostSection;","import { Flex } from \"@chakra-ui/react\";\nimport type { HeadFC } from \"gatsby\";\nimport { graphql } from \"gatsby\";\nimport { getSrc } from \"gatsby-plugin-image\";\n\nimport FeaturedPostSection from \"../components/FeaturedPostSection\";\nimport MainLayout from \"../components/MainLayout\";\nimport Pagenation from \"../components/Pagenation\";\nimport PostGrid from \"../components/PostGrid\";\nimport Profile from \"../components/Profile\";\nimport ShortPostSection from \"../components/ShortPostSection\";\nimport Categories from \"../components/DefaultCategories\";\nimport { ALL_POSTS_NAME, DOMAIN } from \"../constants\";\n\nexport const query = graphql`\n  fragment MdxContent on Mdx {\n    frontmatter {\n      thumbnail {\n        childImageSharp {\n          gatsbyImageData\n        }\n      }\n      title\n      updatedAt\n      createdAt\n      description\n      slug\n      categories\n      tags\n    }\n    excerpt(pruneLength: 100)\n  }\n\n  query AllPostPageTemplate($limit: Int, $skip: Int) {\n    # locale은 null인것만 가져옴 (ko)\n    allMdx(\n      filter: {\n        frontmatter: {\n          title: { nin: [\"김진수 포트폴리오\", \"김진수에 대하여\"] }\n          categories: { nin: \"short\" }\n          locale: { eq: null }\n        }\n      }\n      sort: { frontmatter: { createdAt: DESC } }\n      limit: $limit\n      skip: $skip\n    ) {\n      totalCount\n      nodes {\n        ...MdxContent\n      }\n\n      pageInfo {\n        currentPage\n        pageCount\n      }\n    }\n\n    ogimage: imageSharp(fluid: { originalName: { eq: \"og-image.png\" } }) {\n      gatsbyImageData\n    }\n\n    profileImage: imageSharp(fluid: { originalName: { eq: \"profile.png\" } }) {\n      gatsbyImageData\n    }\n\n    # locale은 null인것만 가져옴 (ko)\n    shortPosts: allMdx(\n      filter: { frontmatter: { categories: { in: \"short\" }, locale: { eq: null } } }\n      sort: { frontmatter: { createdAt: DESC } }\n      limit: 15\n    ) {\n      nodes {\n        frontmatter {\n          title\n          updatedAt\n          createdAt\n          slug\n          tags\n        }\n      }\n    }\n\n    # locale은 null인것만 가져옴 (ko)\n    featuredPosts: allMdx(\n      filter: { frontmatter: { featured: { eq: true }, locale: { eq: null } } }\n      sort: { frontmatter: { createdAt: DESC } }\n    ) {\n      nodes {\n        ...MdxContent\n      }\n    }\n  }\n`;\n\ninterface AllPostPageTemplateProps {\n  data: GatsbyTypes.AllPostPageTemplateQuery;\n}\n\nexport default function AllPostPageTemplate({ data }: AllPostPageTemplateProps) {\n  const currentPage = data.allMdx.pageInfo.currentPage;\n  const pageCount = data.allMdx.pageInfo.pageCount;\n  const featuredPosts = data.featuredPosts.nodes;\n  const shortPosts = data.shortPosts.nodes;\n\n  return (\n    <MainLayout>\n      <Categories currentCategory={ALL_POSTS_NAME} />\n\n      <Flex\n        width=\"100%\"\n        maxWidth={{ base: \"85%\", md: \"800px\", lg: \"85%\", xl: \"100%\" }}\n        direction={{ base: \"column\", lg: \"row\" }}\n        justifyContent=\"center\"\n        alignItems={{ base: \"center\", lg: \"flex-start\" }}  // 좁을 때 중앙정렬\n        marginTop=\"40px\"\n        gap={{ base: \"20px\", lg: \"60px\" }}\n      >\n        <FeaturedPostSection posts={featuredPosts} />\n        <ShortPostSection posts={shortPosts} />\n      </Flex>\n\n      <PostGrid posts={data.allMdx.nodes} />\n      {pageCount > 1 && <Pagenation currentPage={currentPage} pageCount={pageCount} baseUrl=\"\" />}\n      <Profile />\n    </MainLayout>\n  );\n}\n\nexport const Head: HeadFC<Queries.AllPostPageTemplateQuery> = ({ data }) => {\n  const ogimage = data.ogimage?.gatsbyImageData!;\n  const description = \"머신러닝과 알고리즘을 공부하는 김진수 입니다.\";\n  const title = \"Jinsoolve 블로그\";\n\n  return (\n    <>\n      {/* HTML Meta categories */}\n      <title>{title}</title>\n      <meta name=\"description\" content={description} />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n      {/* Facebook Meta categories */}\n      <meta property=\"og:url\" content={DOMAIN} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:site_name\" content={title} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={getSrc(ogimage)} />\n      {/*  Twitter Meta categories  */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta property=\"twitter:domain\" content=\"jinsoolve.netlify.app\" />\n      <meta property=\"twitter:url\" content={DOMAIN} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={getSrc(ogimage)} />\n      <meta name=\"twitter:label1\" content=\"Category\" />\n      <meta name=\"twitter:data1\" content=\"개발\" />\n    </>\n  );\n};\n","'use client';\nimport { isObject, arrayToObjectNotation } from '@chakra-ui/utils';\nimport { getClosestValue } from './media-query.utils.mjs';\nimport { useBreakpoint } from './use-breakpoint.mjs';\nimport { useTheme } from '../system/use-theme.mjs';\n\nfunction useBreakpointValue(values, arg) {\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" };\n  const breakpoint = useBreakpoint(opts);\n  const theme = useTheme();\n  if (!breakpoint)\n    return;\n  const breakpoints = Array.from(theme.__breakpoints?.keys || []);\n  const obj = Array.isArray(values) ? Object.fromEntries(\n    Object.entries(arrayToObjectNotation(values, breakpoints)).map(\n      ([key, value]) => [key, value]\n    )\n  ) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n\nexport { useBreakpointValue };\n","'use client';\nimport { isObject } from '@chakra-ui/utils';\nimport { useMediaQuery } from './use-media-query.mjs';\nimport { useTheme } from '../system/use-theme.mjs';\n\nfunction useBreakpoint(arg) {\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" };\n  const theme = useTheme();\n  const breakpoints = theme.__breakpoints.details.map(\n    ({ minMaxQuery, breakpoint }) => ({\n      breakpoint,\n      query: minMaxQuery.replace(\"@media screen and \", \"\")\n    })\n  );\n  const fallback = breakpoints.map((bp) => bp.breakpoint === opts.fallback);\n  const values = useMediaQuery(\n    breakpoints.map((bp) => bp.query),\n    { fallback, ssr: opts.ssr }\n  );\n  const index = values.findIndex((value) => value == true);\n  return breakpoints[index]?.breakpoint ?? opts.fallback;\n}\n\nexport { useBreakpoint };\n","'use client';\nimport { breakpoints } from '@chakra-ui/utils';\n\nfunction getClosestValue(values, breakpoint, breakpoints$1 = breakpoints) {\n  let index = Object.keys(values).indexOf(breakpoint);\n  if (index !== -1) {\n    return values[breakpoint];\n  }\n  let stopIndex = breakpoints$1.indexOf(breakpoint);\n  while (stopIndex >= 0) {\n    const key = breakpoints$1[stopIndex];\n    if (values.hasOwnProperty(key)) {\n      index = stopIndex;\n      break;\n    }\n    stopIndex -= 1;\n  }\n  if (index !== -1) {\n    const key = breakpoints$1[index];\n    return values[key];\n  }\n  return void 0;\n}\n\nexport { getClosestValue };\n"],"names":["categories","_ref","_data$allMdx$group$fi","currentCategory","data","useStaticQuery","currentCategoryPostCount","allMdx","group","find","category","categoryPostCount","React","createElement","Flex","marginTop","direction","width","alignItems","motion","div","style","display","justifyContent","margin","initial","opacity","y","animate","transition","type","stiffness","damping","Heading","fontStyle","fontSize","base","ALL_POSTS_NAME","md","fontWeight","letterSpacing","convertSlugToTitle","Text","color","allPostCount","as","columnGap","rowGap","flexWrap","padding","maxWidth","Link","to","_hover","textDecoration","Object","values","map","key","koreanTagNames","createdAt","description","slug","thumbnail","title","updatedAt","excerpt","diffMs","useMemo","Date","getTime","isNewPost","Math","floor","isHovered","setIsHovered","useState","borderColor","useColorModeValue","Box","position","borderRadius","overflow","sm_md","minWidth","minHeight","height","boxShadow","borderWidth","cursor","GatsbyImage","objectFit","maxHeight","image","alt","flexDirection","marginBottom","noOfLines","backgroundColor","LeftArrowIcon","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","RightArrowIcon","posts","isLarge","scrollPosition","setScrollPosition","scrollContainerRef","useRef","colorMode","useColorMode","arrowPosition","useBreakpointValue","handleScroll","current","scrollAmount","offsetWidth","newScrollPosition","scrollTo","left","behavior","lg","mx","py","ref","overflowX","scrollSnapType","scrollBehavior","gap","css","paddingBottom","scrollbarColor","scrollbarWidth","post","index","_post$frontmatter","_post$frontmatter2","_post$frontmatter3","_post$frontmatter4","_post$frontmatter5","_post$frontmatter6","_post$frontmatter7","_post$frontmatter8","_post$frontmatter8$th","_post$frontmatter8$th2","frontmatter","flex","scrollSnapAlign","FeaturedPostCard","childImageSharp","gatsbyImageData","IconButton","top","transform","onClick","bg","icon","p","minW","minH","_active","_focus","right","marginLeft","paddingRight","alignSelf","overflowY","overscrollBehavior","AllPostPageTemplate","currentPage","pageInfo","pageCount","featuredPosts","nodes","shortPosts","MainLayout","Categories","xl","FeaturedPostSection","ShortPostSection","PostGrid","Pagenation","baseUrl","Profile","Head","_ref2","_data$ogimage","ogimage","Fragment","name","content","property","DOMAIN","getSrc","arg","breakpoint","opts","is","fallback","breakpoints","__breakpoints","details","minMaxQuery","query","replace","bp","ssr","findIndex","value","useBreakpoint","theme","Array","from","keys","breakpoints$1","indexOf","stopIndex","hasOwnProperty","getClosestValue","isArray","fromEntries","entries"],"sourceRoot":""}